import numpy as np
import matplotlib.pyplot as plt
import cv2
import os
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from skimage.feature import hog
from tqdm import tqdm
import warnings

warnings.filterwarnings('ignore')


def load_data_from_folders(folder_paths, sample_size_per_class=500):
    features = []
    labels = []

    def process_folder(folder_path, label):
        nonlocal features, labels
        images_processed = 0

        for root, dirs, files in os.walk(folder_path):
            for file in tqdm(files, desc=f'Processing {os.path.basename(root)}'):
                if images_processed >= sample_size_per_class:
                    break

                if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                    try:
                        img_path = os.path.join(root, file)
                        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
                        if img is None:
                            continue

                        img = cv2.resize(img, (128, 128))
                        feat = hog(img, orientations=8, pixels_per_cell=(16, 16),
                                   cells_per_block=(1, 1), visualize=False)

                        features.append(feat)
                        labels.append(label)
                        images_processed += 1
                    except Exception as e:
                        print(f"Error processing {file}: {str(e)}")
                        continue

    for folder in folder_paths:
        # Check for cat and dog subfolders
        cat_path = os.path.join(folder, 'cats')
        dog_path = os.path.join(folder, 'dogs')

        if os.path.exists(cat_path):
            process_folder(cat_path, 0)  # 0 for cats
        if os.path.exists(dog_path):
            process_folder(dog_path, 1)  # 1 for dogs

    return np.array(features), np.array(labels)


print("Loading and preprocessing data...")
data_folders = ['train', 'test', 'dogs vs cats']  # Your folder names
X, y = load_data_from_folders([f for f in data_folders if os.path.exists(f)],
                              sample_size_per_class=500)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

pca = PCA(n_components=0.95)
X_train_pca = pca.fit_transform(X_train_scaled)
X_test_pca = pca.transform(X_test_scaled)

print(f"\nOriginal feature dimension: {X_train.shape[1]}")
print(f"Reduced feature dimension after PCA: {X_train_pca.shape[1]}")

print("\nTraining SVM classifier...")
svm = SVC(kernel='rbf', C=1.0, gamma='scale', probability=True, random_state=42)
svm.fit(X_train_pca, y_train)

y_train_pred = svm.predict(X_train_pca)
y_test_pred = svm.predict(X_test_pca)

train_accuracy = accuracy_score(y_train, y_train_pred)
test_accuracy = accuracy_score(y_test, y_test_pred)

print(f"\nTraining Accuracy: {train_accuracy:.4f}")
print(f"Test Accuracy: {test_accuracy:.4f}")

print("\nClassification Report:")
print(classification_report(y_test, y_test_pred, target_names=['Cat', 'Dog']))

conf_mat = confusion_matrix(y_test, y_test_pred)
print("\nConfusion Matrix:")
print(conf_mat)

plt.figure(figsize=(6, 6))
plt.imshow(conf_mat, cmap='Blues')
plt.title('Confusion Matrix')
plt.colorbar()
plt.xticks([0, 1], ['Cat', 'Dog'])
plt.yticks([0, 1], ['Cat', 'Dog'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

for i in range(2):
    for j in range(2):
        plt.text(j, i, conf_mat[i, j], ha='center', va='center', color='red')

plt.show()


def predict_image(image_path, model, scaler, pca):
    try:
        img = cv2.imread(image_path)
        if img is None:
            raise FileNotFoundError(f"Could not read image at {image_path}")

        img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        img_gray = cv2.resize(img_gray, (128, 128))

        features = hog(img_gray, orientations=8, pixels_per_cell=(16, 16),
                       cells_per_block=(1, 1), visualize=False)

        features_scaled = scaler.transform([features])
        features_pca = pca.transform(features_scaled)

        pred = model.predict(features_pca)
        proba = model.predict_proba(features_pca)

        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        plt.axis('off')
        plt.title(f"Predicted: {'Dog' if pred[0] == 1 else 'Cat'} "
                  f"(Confidence: {max(proba[0]):.2f})")
        plt.show()

    except Exception as e:
        print(f"Error: {str(e)}")

print("\nTo test with your own image:")
print("1. Place the image in your working directory")
print("2. Call: predict_image('your_image.jpg', svm, scaler, pca)")

test_images = []
for folder in data_folders:
    test_folder = os.path.join(folder, 'test') if folder != 'test' else folder
    if os.path.exists(test_folder):
        for root, _, files in os.walk(test_folder):
            test_images.extend([os.path.join(root, f) for f in files if f.lower().endswith(('.jpg', '.jpeg', '.png'))])

if test_images:
    print("\nTesting with a random image from your dataset...")
    test_img = np.random.choice(test_images)
    predict_image(test_img, svm, scaler, pca)
else:
    print("\nNo test images found in the provided folders.")
    print("You can test with your own image using predict_image() function.")
