import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
import seaborn as sns

df = pd.read_csv('Mall_Customers.csv')

print("Dataset Info:")
print(df.info())
print("\nFirst 5 rows:")
print(df.head())

X = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

wcss = []  # Within-cluster sum of squares
silhouette_scores = []
possible_k = range(2, 11)

for k in possible_k:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(X_scaled, kmeans.labels_))

plt.figure(figsize=(15, 5))
plt.subplot(1, 2, 1)
plt.plot(possible_k, wcss, 'bo-')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Within-Cluster Sum of Squares (WCSS)')
plt.title('Elbow Method')

plt.subplot(1, 2, 2)
plt.plot(possible_k, silhouette_scores, 'go-')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Analysis')
plt.tight_layout()
plt.show()

optimal_k = 5  # Based on the plots
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
clusters = kmeans.fit_predict(X_scaled)
df['Cluster'] = clusters

cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
cluster_centers_df = pd.DataFrame(cluster_centers, columns=X.columns)
print("\nCluster Centers:")
print(cluster_centers_df)

plt.figure(figsize=(10, 8))
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)',
               hue='Cluster', palette='viridis', s=100)
plt.title('Customer Segments: Income vs Spending Score')
plt.show()

fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')
scatter = ax.scatter(df['Age'], df['Annual Income (k$)'], df['Spending Score (1-100)'],
                    c=df['Cluster'], cmap='viridis', s=50)
ax.set_xlabel('Age')
ax.set_ylabel('Annual Income (k$)')
ax.set_zlabel('Spending Score (1-100)')
plt.title('3D View of Customer Segments')
plt.colorbar(scatter)
plt.show()

segment_profiles = []
for cluster in range(optimal_k):
    cluster_data = df[df['Cluster'] == cluster]
    profile = {
        'Segment': cluster,
        'Size': len(cluster_data),
        'Avg Age': cluster_data['Age'].mean(),
        'Avg Income': cluster_data['Annual Income (k$)'].mean(),
        'Avg Spending Score': cluster_data['Spending Score (1-100)'].mean(),
        'Gender Ratio': f"{len(cluster_data[cluster_data['Gender'] == 'Male'])/len(cluster_data):.1%} Male"
    }
    segment_profiles.append(profile)

segments_df = pd.DataFrame(segment_profiles)
print("\nCustomer Segments Profile:")
print(segments_df)

segment_descriptions = {
    0: "High income, low spending (Potential targets for marketing)",
    1: "Middle income, middle spending (Average customers)",
    2: "High income, high spending (Best customers)",
    3: "Low income, high spending (Young spenders)",
    4: "Low income, low spending (Budget-conscious)"
}

for cluster, desc in segment_descriptions.items():
    print(f"\nSegment {cluster}: {desc}")
    print(df[df['Cluster'] == cluster][['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].describe())
